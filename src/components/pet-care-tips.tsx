'use client';

import { useEffect, useState } from 'react';
import { getPetCareTips } from '@/app/actions';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion';
import { Skeleton } from '@/components/ui/skeleton';
import { PawPrint, AlertTriangle } from 'lucide-react';
import Markdown from 'react-markdown';

type PetCareTipsProps = {
  species: string;
};

export default function PetCareTips({ species }: PetCareTipsProps) {
  const [tips, setTips] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    async function fetchTips() {
      setIsLoading(true);
      setError(null);
      const result = await getPetCareTips(species);
      if (result.success) {
        setTips(result.tips);
      } else {
        setError(result.error || 'An unknown error occurred.');
      }
      setIsLoading(false);
    }
    fetchTips();
  }, [species]);

  return (
    <Card className="bg-primary/20 border-primary/40">
      <CardHeader>
        <CardTitle className="flex items-center gap-2 text-2xl font-headline">
          <PawPrint className="text-accent" />
          AI-Powered Care Tips for a {species}
        </CardTitle>
        <CardDescription>
          Here is some general advice generated by our AI assistant to help you get started.
        </CardDescription>
      </CardHeader>
      <CardContent>
        {isLoading && <LoadingSkeleton />}
        {error && <ErrorDisplay message={error} />}
        {tips && (
            <div className="prose prose-sm max-w-none text-foreground prose-headings:text-foreground prose-strong:text-foreground">
                <Markdown>{tips}</Markdown>
            </div>
        )}
      </CardContent>
    </Card>
  );
}

const LoadingSkeleton = () => (
    <div className="space-y-4">
        <Skeleton className="h-6 w-1/3" />
        <Skeleton className="h-4 w-full" />
        <Skeleton className="h-4 w-5/6" />
        <Skeleton className="h-6 w-1/4 mt-4" />
        <Skeleton className="h-4 w-full" />
    </div>
);

const ErrorDisplay = ({ message }: { message: string }) => (
    <div className="flex items-center gap-4 p-4 rounded-md bg-destructive/10 text-destructive">
        <AlertTriangle className="h-6 w-6" />
        <div>
            <p className="font-bold">Could not load tips</p>
            <p>{message}</p>
        </div>
    </div>
)
